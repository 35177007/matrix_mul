Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/23/19 12:43:53
2017061910刘陆.asm					     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
2017061910刘陆.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess PROTO,dwExitCode:DWORD
				CreateOutputFile PROTO
				CloseFile PROTO
				ReadFromFile PROTO	
				OpenInputFile PROTO
				ReadString PROTO
				WriteString PROTO
				WriteDec PROTO
				WriteChar PROTO
				PDWORD TYPEDEF PTR DWORD ; 双字指针
 = 00000096			BUFFER_SIZE=150

 00000000			.data

 00000000 00000000		aRow DWORD ?  ; A的行数
 00000004 00000000		aCol DWORD ?  ; A的列数
 00000008 00000000		bRow DWORD ?  ; B的行数
 0000000C 00000000		bCol DWORD ?  ; B的列数

 00000010 00000000		tmpRow DWORD ?  ; 暂存的行数 
 00000014 00000000		tmpCol DWORD ?  ; 暂存的列数

				; 矩阵按行存储
 00000018  00000014 [		mA DWORD 20 DUP(?)
	    00000000
	   ]
 00000068  00000014 [		mB DWORD 20 DUP(?)
	    00000000
	   ]
 000000B8  00000014 [		mC DWORD 20 DUP(?)  ; A*B=C
	    00000000
	   ]

 00000108 00000018 R		pA PDWORD OFFSET mA  ; DWORD指针
 0000010C 00000068 R		pB PDWORD OFFSET mB
 00000110 000000B8 R		pC PDWORD OFFSET mC
 00000114 00000000		tP PDWORD ?  ; 临时指针
 00000118 00000000		rpA PDWORD ? ; 暂存pA
 0000011C 00000000		rpB PDWORD ? ; 暂存pB
 00000120 00000000		tmp DWORD ?  ; 暂存循环次数
 00000124 00000000		count DWORD ? ; 暂存该数字的位数
 00000128 00000000		offsetB DWORD ?  ; pB向下一列移动的偏移量

 0000012C  00000032 [		File1 BYTE 50 DUP(?)  ; A矩阵文件路径
	    00
	   ]
 0000015E  00000032 [		File2 BYTE 50 DUP(?)  ; B矩阵文件路径
	    00
	   ]
 00000190  00000032 [		File3 BYTE 50 DUP(?)  ; C矩阵文件输出路径
	    00
	   ]

 000001C2 69 6E 70 75 74	infoA BYTE 'input filename of A:  ',0
	   20 66 69 6C 65
	   6E 61 6D 65 20
	   6F 66 20 41 3A
	   20 20 00
 000001D9 69 6E 70 75 74	infoB BYTE 'input filename of B:  ',0
	   20 66 69 6C 65
	   6E 61 6D 65 20
	   6F 66 20 42 3A
	   20 20 00
 000001F0 69 6E 70 75 74	infoC BYTE 'input filename of C:  ',0
	   20 66 69 6C 65
	   6E 61 6D 65 20
	   6F 66 20 43 3A
	   20 20 00
 00000207 54 68 65 20 73	shapeA BYTE 'The shape of A is:  ',0
	   68 61 70 65 20
	   6F 66 20 41 20
	   69 73 3A 20 20
	   00
 0000021C 54 68 65 20 73	shapeB BYTE 'The shape of B is:  ',0
	   68 61 70 65 20
	   6F 66 20 42 20
	   69 73 3A 20 20
	   00
 00000231 B2 BB C2 FA D7	errorInfo BYTE '不满足乘法条件',0
	   E3 B3 CB B7 A8
	   CC F5 BC FE 00
 00000240 54 68 65 20 72	resultInfo BYTE 'The result is :',0
	   65 73 75 6C 74
	   20 69 73 20 3A
	   00
 00000250  00000005 [		array BYTE 5 DUP(0)   ; 数组,取数位时用
	    00
	   ]

 00000255  00000096 [		buffer BYTE BUFFER_SIZE DUP(?)  ; 文件缓冲区
	    00
	   ]
 000002EB 00000000		fileHandle HANDLE ?  ; 句柄
 00000000			.code
 00000000			main PROC

				; 用户输入
					; 输入A文件名
 00000000  BA 000001C2 R		mov edx,OFFSET infoA
 00000005  E8 00000000 E		call WriteString

 0000000A  BA 0000012C R		mov edx,OFFSET File1
 0000000F  B9 00000032			mov ecx,SIZEOF File1
 00000014  E8 00000000 E		call ReadString

					; 输入B文件名
 00000019  BA 000001D9 R		mov edx,OFFSET infoB
 0000001E  E8 00000000 E		call WriteString

 00000023  BA 0000015E R		mov edx,OFFSET File2
 00000028  B9 00000032			mov ecx,SIZEOF File2
 0000002D  E8 00000000 E		call ReadString

					; 输入C文件名
 00000032  BA 000001F0 R		mov edx,OFFSET infoC
 00000037  E8 00000000 E		call WriteString

 0000003C  BA 00000190 R		mov edx,OFFSET File3
 00000041  B9 00000032			mov ecx,SIZEOF File3
 00000046  E8 00000000 E		call ReadString

					; 读入A矩阵
					
 0000004B  BA 0000012C R		mov edx, OFFSET File1
 00000050  E8 000000B7			call readMatrix
 00000055  C7 05 00000114 R		mov tP,OFFSET mA
	   00000018 R
 0000005F  E8 000000D3			call loadMatrix
 00000064  A1 00000010 R		mov eax,tmpRow
 00000069  A3 00000000 R		mov aRow,eax
 0000006E  A1 00000014 R		mov eax,tmpCol
 00000073  A3 00000004 R		mov aCol,eax

					
					; 读入B矩阵
					
 00000078  BA 0000015E R		mov edx, OFFSET File2
 0000007D  E8 0000008A			call readMatrix
 00000082  C7 05 00000114 R		mov tP,OFFSET mB
	   00000068 R
 0000008C  E8 000000A6			call loadMatrix
 00000091  A1 00000010 R		mov eax,tmpRow
 00000096  A3 00000008 R		mov bRow,eax
 0000009B  A1 00000014 R		mov eax,tmpCol
 000000A0  A3 0000000C R		mov bCol,eax

					; 不满足乘法行列条件
 000000A5  A1 00000004 R		mov eax,aCol
 000000AA  8B 1D 00000008 R		mov ebx,bRow
					.IF eax != ebx
 000000B0  3B C3	   *	    cmp    eax, ebx
 000000B2  74 11	   *	    je	@C0001
 000000B4  BA 00000231 R			mov edx,OFFSET errorInfo
 000000B9  E8 00000000 E			call WriteString
						INVOKE ExitProcess,0
 000000BE  6A 00	   *	    push   +000000000h
 000000C0  E8 00000000 E   *	    call   ExitProcess
					.ENDIF
 000000C5		   *@C0001:

					; 计算pB下移的偏移量
 000000C5  A1 0000000C R		mov eax,bCol
 000000CA  BB 00000004			mov ebx,TYPE mB
 000000CF  F7 E3			mul ebx
 000000D1  A3 00000128 R		mov offsetB,eax

					; 矩阵乘法
 000000D6  E8 00000199			call calRows

					; 在屏幕输出
					
					;call printMatrix

					;INVOKE ExitProcess,0

 000000DB  E8 000001D6			call dumpMatrix

					; 结果输出到屏幕
 000000E0  BA 00000240 R		mov edx,OFFSET resultInfo
 000000E5  E8 00000000 E		call WriteString
 000000EA  B0 0D			mov al,13
 000000EC  E8 00000000 E		call WriteChar
 000000F1  B0 0A			mov al,10
 000000F3  E8 00000000 E		call WriteChar
 000000F8  BA 00000255 R		mov edx,OFFSET buffer
 000000FD  E8 00000000 E		call WriteString

					; 写入文件
 00000102  BA 00000190 R		mov edx,OFFSET File3
 00000107  E8 0000018F			call writeMatrix
 0000010C			main ENDP


 0000010C			readMatrix PROC
					; 打开文件读入,应确保栈顶为文件名的偏移量
 0000010C  E8 00000000 E		call OpenInputFile
 00000111  A3 000002EB R		mov fileHandle,eax

					; 文件读入缓冲区
 00000116  BA 00000255 R		mov edx,OFFSET buffer
 0000011B  B9 00000096			mov ecx,BUFFER_SIZE
 00000120  E8 00000000 E		call ReadFromFile
					
					; 在文件结尾插入空白符
 00000125  C6 80 00000255 R		mov buffer[eax],0
	   00

					; 关闭文件
 0000012C  A1 000002EB R		mov	eax,fileHandle
 00000131  E8 00000000 E		call	CloseFile

 00000136  C3				ret
 00000137			readMatrix ENDP

 00000137			loadMatrix PROC USES esi  ; !!!! 保存esi 否则ret找不到正确地址!!!!!

					; 从缓冲区读字符串,转为DWORD,应确保栈顶为 矩阵数组头的偏移量
					; esi 变址寄存器
					; eax 乘法
					; edx 暂存和
					; ecx 暂存被乘数
 00000137  56		   *	    push   esi
 00000138  C7 05 00000010 R		mov tmpRow,0
	   00000000
 00000142  C7 05 00000014 R		mov tmpCol,0
	   00000000
 0000014C  BE 00000000			mov esi,0
 00000151  B8 00000000			mov eax,0
 00000156  BB 00000000			mov ebx,0
 0000015B  BA 00000000			mov edx,0

					.WHILE buffer[esi] != 0
 00000160  EB 73	   *	    jmp    @C0003
 00000162		   *@C0004:
						
						.IF buffer[esi] == 20h ; 是空格
 00000162  80 BE 00000255 R
	   20		   *	    cmp    buffer + [esi], 020h
 00000169  75 26	   *	    jne    @C0005
							.IF tmpRow<1  
 0000016B  83 3D 00000010 R
	   01		   *	    cmp    tmpRow, 001h
 00000172  73 06	   *	    jae    @C0007
 00000174  FF 05 00000014 R					inc tmpCol    ; 列数加一
							.ENDIF

 0000017A		   *@C0007:
 0000017A  8B 3D 00000114 R				mov edi,tP
 00000180  89 1F					mov [edi],ebx ; 写入到数组
 00000182  83 05 00000114 R				add tP,TYPE DWORD        ; 指针后移
	   04
 00000189  46						inc esi
 0000018A  BB 00000000					mov ebx,0

						.ELSEIF buffer[esi] == 0dh; 是换行符 一个回车换行包括两个字符:0dh 0ah
 0000018F  EB 44	   *	    jmp    @C0009
 00000191		   *@C0005:
 00000191  80 BE 00000255 R
	   0D		   *	    cmp    buffer + [esi], 00Dh
 00000198  75 1F	   *	    jne    @C000A
 0000019A  FF 05 00000010 R				inc tmpRow  ; 行数加一

 000001A0  8B 3D 00000114 R				mov edi,tP
 000001A6  89 1F					mov [edi],ebx ; 写入到数组
 000001A8  BB 00000000					mov ebx,0
 000001AD  83 05 00000114 R				add tP,TYPE DWORD        ; 指针后移
	   04
 000001B4  83 C6 02					add esi,2
							
						.ELSE ; 是数字
 000001B7  EB 1C	   *	    jmp    @C000C
 000001B9		   *@C000A:
							; ASCII码 除以 30h 余数是 对应的数字值 DIV 指令
 000001B9  0F B6 86					movzx eax,buffer[esi] ;读入的字符存入edi
	   00000255 R
 000001C0  B9 00000030					mov ecx,30h ; EAX/ECX --> 商EAX 余数EDX
 000001C5  F7 F1					div ecx  
							
 000001C7  8B FA					mov edi,edx

 000001C9  B8 0000000A					mov eax,10 ; EBX中暂存的和乘以10 --> EAX
 000001CE  F7 E3					mul ebx
 000001D0  8B D8					mov ebx,eax ; 存回EBX

 000001D2  03 DF					add ebx,edi
 000001D4  46						inc esi

						.ENDIF
						
					.ENDW
 000001D5		   *@C000C:
 000001D5		   *@C0009:
 000001D5		   *@C0003:
 000001D5  80 BE 00000255 R
	   00		   *	    cmp    buffer + [esi], 000h
 000001DC  75 84	   *	    jne    @C0004
 000001DE  FF 05 00000014 R		inc tmpCol
					ret
 000001E4  5E		   *	    pop    esi
 000001E5  C3		   *	    ret    00000h
 000001E6			loadMatrix ENDP


				; 计算A矩阵的一行分别乘B矩阵的每一列 (二重循环)
 000001E6			calOneRow PROC USES ecx

 000001E6  51		   *	    push   ecx
 000001E7  8B 0D 0000000C R		mov ecx,bCol ; 设置外层循环数
 000001ED  A1 00000108 R		mov eax,pA
 000001F2  A3 00000118 R		mov rpA,eax  ; 暂存pA

 000001F7			L1:				 ; 外层循环
 000001F7  A1 0000010C R		mov eax,pB
 000001FC  A3 0000011C R		mov rpB,eax  ; 暂存pB

 00000201  BB 00000000			mov ebx,0    ; 累加和
 00000206  89 0D 00000120 R		mov tmp,ecx
 0000020C  8B 0D 00000004 R		mov ecx,aCol ; 设置内层循环数
					
 00000212				L2:          ; 内层循环
 00000212  8B 35 00000108 R			mov esi,pA
 00000218  8B 06				mov eax,[esi] ; pA 所指的数 --> EAX

 0000021A  8B 35 0000010C R			mov esi,pB
 00000220  8B 16				mov edx,[esi]
 00000222  F7 E2				mul edx   ; pB 所指的数*EAX --> EAX
 00000224  03 D8				add ebx,eax ; 部分和 --> EBX

 00000226  83 05 00000108 R			add pA,TYPE mA  ; pA横向移动
	   04

 0000022D  A1 00000128 R			mov eax,offsetB
 00000232  01 05 0000010C R			add pB,eax  ; pB纵向移动

 00000238  E2 D8				loop L2

 0000023A  8B 3D 00000110 R		mov edi,pC
 00000240  89 1F			mov [edi],ebx   ; 写到C矩阵
 00000242  83 05 00000110 R		add pC,TYPE mC  ; pC后移
	   04

 00000249  A1 00000118 R		mov eax,rpA  ; 恢复pA
 0000024E  A3 00000108 R		mov pA,eax
					
 00000253  A1 0000011C R		mov eax,rpB
 00000258  83 C0 04			add eax,TYPE mB
 0000025B  A3 0000010C R		mov pB,eax   ; pB指向下一列

 00000260  8B 0D 00000120 R		mov ecx,tmp  ; 恢复外层循环值
 00000266  E2 8F			loop L1
					
 00000268  B8 00000068 R		mov eax,OFFSET mB
 0000026D  A3 0000010C R		mov pB,eax   ; pB重新指向 B矩阵

					ret
 00000272  59		   *	    pop    ecx
 00000273  C3		   *	    ret    00000h
 00000274			calOneRow ENDP

				; 对矩阵A的每一行调用calOneRow , 得出最终结果
 00000274			calRows PROC
 00000274  8B 0D 00000000 R		mov ecx,aRow
					
 0000027A			L1:
 0000027A  51				push ecx       ;  !!!重要
 0000027B  E8 FFFFFF66			call calOneRow
 00000280  A1 00000108 R		mov eax,pA

 00000285  A1 00000004 R		mov eax,aCol
 0000028A  BA 00000004			mov edx,TYPE mA
 0000028F  F7 E2			mul edx
 00000291  01 05 00000108 R		add pA,eax

 00000297  59				pop ecx    ; !!! 重要
 00000298  E2 E0			loop L1
					
 0000029A  C3				ret
 0000029B			calRows ENDP


 0000029B			writeMatrix PROC
				; 从缓冲区输出到文件, 设edx中已有文件路径
 0000029B  E8 00000000 E		call CreateOutputFile
					
 000002A0  BA 00000255 R		mov edx,OFFSET buffer
 000002A5  8B 0D 00000120 R		mov ecx,tmp ; 此处是文件长度
 000002AB  E8 00000000 E		call WriteToFile
 000002B0  E8 00000000 E		call CloseFile 
 000002B5  C3				ret
 000002B6			writeMatrix ENDP

 000002B6			dumpMatrix PROC USES esi
				; DWORD 数组转成字符串并写入缓冲区
 000002B6  56		   *	    push   esi
 000002B7  8B 1D 0000000C R		mov ebx,bCol
 000002BD  A1 00000000 R		mov eax,aRow
 000002C2  F7 E3			mul ebx
 000002C4  8B C8			mov ecx,eax  ; C矩阵总元素数
 000002C6  C7 05 00000014 R		mov tmpCol,0
	   00000000
 000002D0  C7 05 00000110 R		mov pC,OFFSET mC
	   000000B8 R
 000002DA  BE 00000000			mov esi,0

 000002DF			L1:
					
 000002DF  8B 15 00000110 R		mov edx,pC
 000002E5  8B 02			mov eax,[edx]
					
 000002E7  FF 05 00000014 R		inc tmpCol

 000002ED  BB 0000000A			mov ebx,10    ; ebx为除数
 000002F2  BA 00000000			mov edx,0
 000002F7  BF 00000000			mov edi,0     ; 计数,记录压栈次数
 000002FC  EB 0A		    jmp TESTING
 000002FE			FORLOOP:
 000002FE  33 D2		    xor edx,edx   ; 异或操作(清零edx),32位做除法时余数存放在edx，使用前要清零
 00000300  F7 F3		    div ebx       ; eax = eax/10 商在eax中，余数是edx
 00000302  80 C2 30		    add dl, 30h   ; 将数字转换成字符
 00000305  66| 52			push dx
 00000307  47			    inc edi

 00000308			TESTING:
 00000308  83 F8 00		    cmp eax,0    ; 被除数 存放在eax
 0000030B  75 F1		    jne FORLOOP  ; 非零则跳转

					.WHILE edi > 0  ; 逐次出栈
 0000030D  EB 0A	   *	    jmp    @C000E
 0000030F		   *@C000F:
 0000030F  66| 5A				pop dx
 00000311  88 96 00000255 R			mov buffer[esi],dl
 00000317  46					inc esi
 00000318  4F					dec edi
					.ENDW
 00000319		   *@C000E:
 00000319  83 FF 00	   *	    cmp    edi, 000h
 0000031C  77 F1	   *	    ja	@C000F

 0000031E  C6 86 00000255 R		mov buffer[esi],20h ; 写空格
	   20
 00000325  46				inc esi

 00000326  8B 15 0000000C R		mov edx,bCol

					.IF tmpCol == edx
 0000032C  39 15 00000014 R *	    cmp    tmpCol, edx
 00000332  75 1A	   *	    jne    @C0011
						; 写入回车换行符
 00000334  C6 86 00000255 R			mov buffer[esi],0dh
	   0D
 0000033B  46					inc esi
 0000033C  C6 86 00000255 R			mov buffer[esi],0ah
	   0A
 00000343  46					inc esi
 00000344  C7 05 00000014 R			mov tmpCol,0
	   00000000
					.ENDIF
 0000034E		   *@C0011:


 0000034E  83 05 00000110 R		add pC,TYPE mC
	   04
 00000355  E2 88			loop L1
 00000357  C6 86 00000255 R		mov buffer[esi],0
	   00
 0000035E  89 35 00000120 R		mov tmp,esi
					ret
 00000364  5E		   *	    pop    esi
 00000365  C3		   *	    ret    00000h
 00000366			dumpMatrix ENDP

				END main


				printMatrix PROC

					mov edi,0
					mov ecx,aRow ; 外层循环数
				L0:
					mov tmp,ecx  ; 保存外层循环数
					mov ecx,bCol ; 内层循环数
					
					L2:
						
						mov eax,mC[edi]
						call WriteDec   ; 打印十进制数
						mov al,32
						call WriteChar  ; 打印空格

						add edi,TYPE mC
						loop L2

					; 写入回车换行符
					mov al,13
					call WriteChar
					mov al,10
					call WriteChar

					mov ecx,tmp
					loop L0
					ret
				printMatrix ENDP
Microsoft (R) Macro Assembler Version 14.16.27027.1	    04/23/19 12:43:53
2017061910刘陆.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Types:

                N a m e                  Size     Attr

PDWORD . . . . . . . . . . . . .	 00000004     Near32 PTR DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002EF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000366 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calOneRow  . . . . . . . . . . .	P Near	 000001E6 _TEXT	Length= 0000008E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000212 _TEXT	
calRows  . . . . . . . . . . . .	P Near	 00000274 _TEXT	Length= 00000027 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000027A _TEXT	
dumpMatrix . . . . . . . . . . .	P Near	 000002B6 _TEXT	Length= 000000B0 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002DF _TEXT	
  FORLOOP  . . . . . . . . . . .	L Near	 000002FE _TEXT	
  TESTING  . . . . . . . . . . .	L Near	 00000308 _TEXT	
loadMatrix . . . . . . . . . . .	P Near	 00000137 _TEXT	Length= 000000AF Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000010C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readMatrix . . . . . . . . . . .	P Near	 0000010C _TEXT	Length= 0000002B Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeMatrix  . . . . . . . . . .	P Near	 0000029B _TEXT	Length= 0000001B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00000096h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
File1  . . . . . . . . . . . . .	Byte	 0000012C _DATA	
File2  . . . . . . . . . . . . .	Byte	 0000015E _DATA	
File3  . . . . . . . . . . . . .	Byte	 00000190 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aCol . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
aRow . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
array  . . . . . . . . . . . . .	Byte	 00000250 _DATA	
bCol . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
bRow . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000255 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000124 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorInfo  . . . . . . . . . . .	Byte	 00000231 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000002EB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
infoA  . . . . . . . . . . . . .	Byte	 000001C2 _DATA	
infoB  . . . . . . . . . . . . .	Byte	 000001D9 _DATA	
infoC  . . . . . . . . . . . . .	Byte	 000001F0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mA . . . . . . . . . . . . . . .	DWord	 00000018 _DATA	
mB . . . . . . . . . . . . . . .	DWord	 00000068 _DATA	
mC . . . . . . . . . . . . . . .	DWord	 000000B8 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
offsetB  . . . . . . . . . . . .	DWord	 00000128 _DATA	
pA . . . . . . . . . . . . . . .	DWord	 00000108 _DATA	
pB . . . . . . . . . . . . . . .	DWord	 0000010C _DATA	
pC . . . . . . . . . . . . . . .	DWord	 00000110 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultInfo . . . . . . . . . . .	Byte	 00000240 _DATA	
rpA  . . . . . . . . . . . . . .	DWord	 00000118 _DATA	
rpB  . . . . . . . . . . . . . .	DWord	 0000011C _DATA	
shapeA . . . . . . . . . . . . .	Byte	 00000207 _DATA	
shapeB . . . . . . . . . . . . .	Byte	 0000021C _DATA	
tP . . . . . . . . . . . . . . .	DWord	 00000114 _DATA	
tmpCol . . . . . . . . . . . . .	DWord	 00000014 _DATA	
tmpRow . . . . . . . . . . . . .	DWord	 00000010 _DATA	
tmp  . . . . . . . . . . . . . .	DWord	 00000120 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
